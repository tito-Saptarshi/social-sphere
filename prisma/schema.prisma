// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model TestUpload {
  id       String  @id @default(uuid())
  userId   String
  name     String?
  other    String?
  imageUrl String?
  videoUrl String?
}

model User {
  id        String   @id
  email     String
  firstName String
  lastName  String
  imageUrl  String?
  userName  String?  @unique
  bio       String?
  createdAt DateTime @default(now())

  Post               Post[]
  Like               Like[]
  createdCommunities Community[]
  Following          CommunityFollower[]
  Comment            Comment[]
  FollowingUsers     UserFollower[]      @relation("UserFollows")
  Followers          UserFollower[]      @relation("UserIsFollowedBy")

  communityFollowerId String?
}

model Community {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  Followers CommunityFollower[]

  creator User?   @relation(fields: [userId], references: [id])
  userId  String?
}

model CommunityFollower {
  id String @id @default(uuid())

  follow Boolean

  Community   Community? @relation(fields: [communityId], references: [id])
  communityId String?
  User        User?      @relation(fields: [userId], references: [id])
  userId      String?
}

model Post {
  id          String   @id @default(uuid())
  userId      String
  title       String
  description String?
  imageUrl    String?
  videoUrl    String?
  createdAt   DateTime @default(now())
  communityId String?

  Like    Like[]
  Comment Comment[]

  User User @relation(fields: [userId], references: [id])
}

model Like {
  id String @id @default(uuid())

  liked Boolean

  Post   Post?   @relation(fields: [postId], references: [id])
  postId String?

  User   User?   @relation(fields: [userId], references: [id])
  userId String?
}

model UserFollower {
  id String @id @default(uuid())

  followerId  String
  followingId String

  follower  User @relation("UserFollows", fields: [followerId], references: [id])
  following User @relation("UserIsFollowedBy", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
}

model Comment {
  id        String   @id @default(uuid())
  text      String
  createdAt DateTime @default(now())

  Post   Post?   @relation(fields: [postId], references: [id])
  postId String?
  User   User?   @relation(fields: [userId], references: [id])
  userId String?
}
